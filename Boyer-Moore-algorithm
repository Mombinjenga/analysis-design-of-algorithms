using System;
using System.Collections.Generic;

public class BoyerMooreStringMatcher
{
    public static void BoyerMooreSearch(string text, string pattern)
    {
        int n = text.Length;
        int m = pattern.Length;
        int[] badChar = new int[256];
        int[] goodSuffix = new int[m];

        BuildBadCharTable(pattern, m, badChar);
        BuildGoodSuffixTable(pattern, m, goodSuffix);

        int s = 0;
        while (s <= (n - m))
        {
            int j = m - 1;

            while (j >= 0 && pattern[j] == text[s + j])
                j--;

            if (j < 0)
            {
                Console.WriteLine("Pattern found at index " + s);
                s += (s + m < n) ? m - badChar[text[s + m]] : 1;
            }
            else
            {
                s += Math.Max(1, j - badChar[text[s + j]]);
            }
        }
    }

    private static void BuildBadCharTable(string pattern, int size, int[] badChar)
    {
        for (int i = 0; i < 256; i++)
            badChar[i] = -1;

        for (int i = 0; i < size; i++)
            badChar[(int)pattern[i]] = i;
    }

    private static void BuildGoodSuffixTable(string pattern, int size, int[] goodSuffix)
    {
        int[] border = new int[size + 1];
        int i = size, j = size + 1;
        border[i] = j;

        while (i > 0)
        {
            while (j <= size && pattern[i - 1] != pattern[j - 1])
            {
                if (goodSuffix[j] == 0)
                    goodSuffix[j] = j - i;
                j = border[j];
            }
            i--;
            j--;
            border[i] = j;
        }

        j = border[0];
        for (i = 0; i <= size; i++)
        {
            if (goodSuffix[i] == 0)
                goodSuffix[i] = j;
            if (i == j)
                j = border[j];
        }
    }

    public static void Main()
    {
        string text = "ABABDABACDABABCABAB";
        string pattern = "ABABCABAB";
        BoyerMooreSearch(text, pattern);
    }
}
